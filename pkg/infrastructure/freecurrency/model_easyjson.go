// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package freecurrency

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeMoneyTransferPkgInfrastructureFreecurrency(in *jlexer.Lexer, out *CurrencyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			easyjsonC80ae7adDecode(in, &out.Query)
		case "data":
			easyjsonC80ae7adDecode1(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeMoneyTransferPkgInfrastructureFreecurrency(out *jwriter.Writer, in CurrencyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		easyjsonC80ae7adEncode(out, in.Query)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncode1(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeMoneyTransferPkgInfrastructureFreecurrency(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeMoneyTransferPkgInfrastructureFreecurrency(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeMoneyTransferPkgInfrastructureFreecurrency(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeMoneyTransferPkgInfrastructureFreecurrency(l, v)
}
func easyjsonC80ae7adDecode1(in *jlexer.Lexer, out *struct {
	USD float64 `json:"USD"`
	JPY float64 `json:"JPY"`
	CNY float64 `json:"CNY"`
	CHF float64 `json:"CHF"`
	CAD float64 `json:"CAD"`
	MXN float64 `json:"MXN"`
	INR float64 `json:"INR"`
	BRL float64 `json:"BRL"`
	RUB int     `json:"RUB"`
	KRW float64 `json:"KRW"`
	IDR float64 `json:"IDR"`
	TRY float64 `json:"TRY"`
	SAR float64 `json:"SAR"`
	SEK float64 `json:"SEK"`
	NGN float64 `json:"NGN"`
	PLN float64 `json:"PLN"`
	ARS float64 `json:"ARS"`
	NOK float64 `json:"NOK"`
	TWD float64 `json:"TWD"`
	IRR float64 `json:"IRR"`
	AED float64 `json:"AED"`
	COP float64 `json:"COP"`
	THB float64 `json:"THB"`
	ZAR float64 `json:"ZAR"`
	DKK float64 `json:"DKK"`
	MYR float64 `json:"MYR"`
	SGD float64 `json:"SGD"`
	ILS float64 `json:"ILS"`
	HKD float64 `json:"HKD"`
	EGP float64 `json:"EGP"`
	PHP float64 `json:"PHP"`
	CLP float64 `json:"CLP"`
	PKR float64 `json:"PKR"`
	IQD float64 `json:"IQD"`
	DZD float64 `json:"DZD"`
	KZT float64 `json:"KZT"`
	QAR float64 `json:"QAR"`
	CZK float64 `json:"CZK"`
	PEN float64 `json:"PEN"`
	RON float64 `json:"RON"`
	VND float64 `json:"VND"`
	BDT float64 `json:"BDT"`
	HUF float64 `json:"HUF"`
	UAH float64 `json:"UAH"`
	AOA float64 `json:"AOA"`
	MAD float64 `json:"MAD"`
	OMR float64 `json:"OMR"`
	CUC float64 `json:"CUC"`
	BYR float64 `json:"BYR"`
	AZN float64 `json:"AZN"`
	LKR float64 `json:"LKR"`
	SDG float64 `json:"SDG"`
	SYP float64 `json:"SYP"`
	MMK float64 `json:"MMK"`
	DOP float64 `json:"DOP"`
	UZS float64 `json:"UZS"`
	KES float64 `json:"KES"`
	GTQ float64 `json:"GTQ"`
	URY float64 `json:"URY"`
	HRV float64 `json:"HRV"`
	MOP float64 `json:"MOP"`
	ETB float64 `json:"ETB"`
	CRC float64 `json:"CRC"`
	TZS float64 `json:"TZS"`
	TMT float64 `json:"TMT"`
	TND float64 `json:"TND"`
	PAB float64 `json:"PAB"`
	LBP float64 `json:"LBP"`
	RSD float64 `json:"RSD"`
	LYD float64 `json:"LYD"`
	GHS float64 `json:"GHS"`
	YER float64 `json:"YER"`
	BOB float64 `json:"BOB"`
	BHD float64 `json:"BHD"`
	CDF float64 `json:"CDF"`
	PYG float64 `json:"PYG"`
	UGX float64 `json:"UGX"`
	SVC float64 `json:"SVC"`
	TTD float64 `json:"TTD"`
	AFN float64 `json:"AFN"`
	NPR float64 `json:"NPR"`
	HNL float64 `json:"HNL"`
	BIH float64 `json:"BIH"`
	BND float64 `json:"BND"`
	ISK float64 `json:"ISK"`
	KHR float64 `json:"KHR"`
	GEL float64 `json:"GEL"`
	MZN float64 `json:"MZN"`
	BWP float64 `json:"BWP"`
	PGK float64 `json:"PGK"`
	JMD float64 `json:"JMD"`
	XAF float64 `json:"XAF"`
	NAD float64 `json:"NAD"`
	ALL float64 `json:"ALL"`
	SSP float64 `json:"SSP"`
	MUR float64 `json:"MUR"`
	MNT float64 `json:"MNT"`
	NIO float64 `json:"NIO"`
	LAK float64 `json:"LAK"`
	MKD float64 `json:"MKD"`
	AMD float64 `json:"AMD"`
	MGA float64 `json:"MGA"`
	XPF float64 `json:"XPF"`
	TJS float64 `json:"TJS"`
	HTG float64 `json:"HTG"`
	BSD float64 `json:"BSD"`
	MDL float64 `json:"MDL"`
	RWF float64 `json:"RWF"`
	KGS float64 `json:"KGS"`
	GNF float64 `json:"GNF"`
	SRD float64 `json:"SRD"`
	SLL float64 `json:"SLL"`
	XOF float64 `json:"XOF"`
	MWK float64 `json:"MWK"`
	FJD float64 `json:"FJD"`
	ERN float64 `json:"ERN"`
	SZL float64 `json:"SZL"`
	GYD float64 `json:"GYD"`
	BIF float64 `json:"BIF"`
	KYD float64 `json:"KYD"`
	MVR float64 `json:"MVR"`
	LSL float64 `json:"LSL"`
	LRD float64 `json:"LRD"`
	CVE float64 `json:"CVE"`
	DJF float64 `json:"DJF"`
	SCR float64 `json:"SCR"`
	SOS float64 `json:"SOS"`
	GMD float64 `json:"GMD"`
	KMF float64 `json:"KMF"`
	STD float64 `json:"STD"`
	BTC float64 `json:"BTC"`
	XRP float64 `json:"XRP"`
	AUD float64 `json:"AUD"`
	BGN float64 `json:"BGN"`
	JOD float64 `json:"JOD"`
	GBP float64 `json:"GBP"`
	ETH float64 `json:"ETH"`
	EUR float64 `json:"EUR"`
	LTC float64 `json:"LTC"`
	NZD float64 `json:"NZD"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "USD":
			out.USD = float64(in.Float64())
		case "JPY":
			out.JPY = float64(in.Float64())
		case "CNY":
			out.CNY = float64(in.Float64())
		case "CHF":
			out.CHF = float64(in.Float64())
		case "CAD":
			out.CAD = float64(in.Float64())
		case "MXN":
			out.MXN = float64(in.Float64())
		case "INR":
			out.INR = float64(in.Float64())
		case "BRL":
			out.BRL = float64(in.Float64())
		case "RUB":
			out.RUB = int(in.Int())
		case "KRW":
			out.KRW = float64(in.Float64())
		case "IDR":
			out.IDR = float64(in.Float64())
		case "TRY":
			out.TRY = float64(in.Float64())
		case "SAR":
			out.SAR = float64(in.Float64())
		case "SEK":
			out.SEK = float64(in.Float64())
		case "NGN":
			out.NGN = float64(in.Float64())
		case "PLN":
			out.PLN = float64(in.Float64())
		case "ARS":
			out.ARS = float64(in.Float64())
		case "NOK":
			out.NOK = float64(in.Float64())
		case "TWD":
			out.TWD = float64(in.Float64())
		case "IRR":
			out.IRR = float64(in.Float64())
		case "AED":
			out.AED = float64(in.Float64())
		case "COP":
			out.COP = float64(in.Float64())
		case "THB":
			out.THB = float64(in.Float64())
		case "ZAR":
			out.ZAR = float64(in.Float64())
		case "DKK":
			out.DKK = float64(in.Float64())
		case "MYR":
			out.MYR = float64(in.Float64())
		case "SGD":
			out.SGD = float64(in.Float64())
		case "ILS":
			out.ILS = float64(in.Float64())
		case "HKD":
			out.HKD = float64(in.Float64())
		case "EGP":
			out.EGP = float64(in.Float64())
		case "PHP":
			out.PHP = float64(in.Float64())
		case "CLP":
			out.CLP = float64(in.Float64())
		case "PKR":
			out.PKR = float64(in.Float64())
		case "IQD":
			out.IQD = float64(in.Float64())
		case "DZD":
			out.DZD = float64(in.Float64())
		case "KZT":
			out.KZT = float64(in.Float64())
		case "QAR":
			out.QAR = float64(in.Float64())
		case "CZK":
			out.CZK = float64(in.Float64())
		case "PEN":
			out.PEN = float64(in.Float64())
		case "RON":
			out.RON = float64(in.Float64())
		case "VND":
			out.VND = float64(in.Float64())
		case "BDT":
			out.BDT = float64(in.Float64())
		case "HUF":
			out.HUF = float64(in.Float64())
		case "UAH":
			out.UAH = float64(in.Float64())
		case "AOA":
			out.AOA = float64(in.Float64())
		case "MAD":
			out.MAD = float64(in.Float64())
		case "OMR":
			out.OMR = float64(in.Float64())
		case "CUC":
			out.CUC = float64(in.Float64())
		case "BYR":
			out.BYR = float64(in.Float64())
		case "AZN":
			out.AZN = float64(in.Float64())
		case "LKR":
			out.LKR = float64(in.Float64())
		case "SDG":
			out.SDG = float64(in.Float64())
		case "SYP":
			out.SYP = float64(in.Float64())
		case "MMK":
			out.MMK = float64(in.Float64())
		case "DOP":
			out.DOP = float64(in.Float64())
		case "UZS":
			out.UZS = float64(in.Float64())
		case "KES":
			out.KES = float64(in.Float64())
		case "GTQ":
			out.GTQ = float64(in.Float64())
		case "URY":
			out.URY = float64(in.Float64())
		case "HRV":
			out.HRV = float64(in.Float64())
		case "MOP":
			out.MOP = float64(in.Float64())
		case "ETB":
			out.ETB = float64(in.Float64())
		case "CRC":
			out.CRC = float64(in.Float64())
		case "TZS":
			out.TZS = float64(in.Float64())
		case "TMT":
			out.TMT = float64(in.Float64())
		case "TND":
			out.TND = float64(in.Float64())
		case "PAB":
			out.PAB = float64(in.Float64())
		case "LBP":
			out.LBP = float64(in.Float64())
		case "RSD":
			out.RSD = float64(in.Float64())
		case "LYD":
			out.LYD = float64(in.Float64())
		case "GHS":
			out.GHS = float64(in.Float64())
		case "YER":
			out.YER = float64(in.Float64())
		case "BOB":
			out.BOB = float64(in.Float64())
		case "BHD":
			out.BHD = float64(in.Float64())
		case "CDF":
			out.CDF = float64(in.Float64())
		case "PYG":
			out.PYG = float64(in.Float64())
		case "UGX":
			out.UGX = float64(in.Float64())
		case "SVC":
			out.SVC = float64(in.Float64())
		case "TTD":
			out.TTD = float64(in.Float64())
		case "AFN":
			out.AFN = float64(in.Float64())
		case "NPR":
			out.NPR = float64(in.Float64())
		case "HNL":
			out.HNL = float64(in.Float64())
		case "BIH":
			out.BIH = float64(in.Float64())
		case "BND":
			out.BND = float64(in.Float64())
		case "ISK":
			out.ISK = float64(in.Float64())
		case "KHR":
			out.KHR = float64(in.Float64())
		case "GEL":
			out.GEL = float64(in.Float64())
		case "MZN":
			out.MZN = float64(in.Float64())
		case "BWP":
			out.BWP = float64(in.Float64())
		case "PGK":
			out.PGK = float64(in.Float64())
		case "JMD":
			out.JMD = float64(in.Float64())
		case "XAF":
			out.XAF = float64(in.Float64())
		case "NAD":
			out.NAD = float64(in.Float64())
		case "ALL":
			out.ALL = float64(in.Float64())
		case "SSP":
			out.SSP = float64(in.Float64())
		case "MUR":
			out.MUR = float64(in.Float64())
		case "MNT":
			out.MNT = float64(in.Float64())
		case "NIO":
			out.NIO = float64(in.Float64())
		case "LAK":
			out.LAK = float64(in.Float64())
		case "MKD":
			out.MKD = float64(in.Float64())
		case "AMD":
			out.AMD = float64(in.Float64())
		case "MGA":
			out.MGA = float64(in.Float64())
		case "XPF":
			out.XPF = float64(in.Float64())
		case "TJS":
			out.TJS = float64(in.Float64())
		case "HTG":
			out.HTG = float64(in.Float64())
		case "BSD":
			out.BSD = float64(in.Float64())
		case "MDL":
			out.MDL = float64(in.Float64())
		case "RWF":
			out.RWF = float64(in.Float64())
		case "KGS":
			out.KGS = float64(in.Float64())
		case "GNF":
			out.GNF = float64(in.Float64())
		case "SRD":
			out.SRD = float64(in.Float64())
		case "SLL":
			out.SLL = float64(in.Float64())
		case "XOF":
			out.XOF = float64(in.Float64())
		case "MWK":
			out.MWK = float64(in.Float64())
		case "FJD":
			out.FJD = float64(in.Float64())
		case "ERN":
			out.ERN = float64(in.Float64())
		case "SZL":
			out.SZL = float64(in.Float64())
		case "GYD":
			out.GYD = float64(in.Float64())
		case "BIF":
			out.BIF = float64(in.Float64())
		case "KYD":
			out.KYD = float64(in.Float64())
		case "MVR":
			out.MVR = float64(in.Float64())
		case "LSL":
			out.LSL = float64(in.Float64())
		case "LRD":
			out.LRD = float64(in.Float64())
		case "CVE":
			out.CVE = float64(in.Float64())
		case "DJF":
			out.DJF = float64(in.Float64())
		case "SCR":
			out.SCR = float64(in.Float64())
		case "SOS":
			out.SOS = float64(in.Float64())
		case "GMD":
			out.GMD = float64(in.Float64())
		case "KMF":
			out.KMF = float64(in.Float64())
		case "STD":
			out.STD = float64(in.Float64())
		case "BTC":
			out.BTC = float64(in.Float64())
		case "XRP":
			out.XRP = float64(in.Float64())
		case "AUD":
			out.AUD = float64(in.Float64())
		case "BGN":
			out.BGN = float64(in.Float64())
		case "JOD":
			out.JOD = float64(in.Float64())
		case "GBP":
			out.GBP = float64(in.Float64())
		case "ETH":
			out.ETH = float64(in.Float64())
		case "EUR":
			out.EUR = float64(in.Float64())
		case "LTC":
			out.LTC = float64(in.Float64())
		case "NZD":
			out.NZD = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode1(out *jwriter.Writer, in struct {
	USD float64 `json:"USD"`
	JPY float64 `json:"JPY"`
	CNY float64 `json:"CNY"`
	CHF float64 `json:"CHF"`
	CAD float64 `json:"CAD"`
	MXN float64 `json:"MXN"`
	INR float64 `json:"INR"`
	BRL float64 `json:"BRL"`
	RUB int     `json:"RUB"`
	KRW float64 `json:"KRW"`
	IDR float64 `json:"IDR"`
	TRY float64 `json:"TRY"`
	SAR float64 `json:"SAR"`
	SEK float64 `json:"SEK"`
	NGN float64 `json:"NGN"`
	PLN float64 `json:"PLN"`
	ARS float64 `json:"ARS"`
	NOK float64 `json:"NOK"`
	TWD float64 `json:"TWD"`
	IRR float64 `json:"IRR"`
	AED float64 `json:"AED"`
	COP float64 `json:"COP"`
	THB float64 `json:"THB"`
	ZAR float64 `json:"ZAR"`
	DKK float64 `json:"DKK"`
	MYR float64 `json:"MYR"`
	SGD float64 `json:"SGD"`
	ILS float64 `json:"ILS"`
	HKD float64 `json:"HKD"`
	EGP float64 `json:"EGP"`
	PHP float64 `json:"PHP"`
	CLP float64 `json:"CLP"`
	PKR float64 `json:"PKR"`
	IQD float64 `json:"IQD"`
	DZD float64 `json:"DZD"`
	KZT float64 `json:"KZT"`
	QAR float64 `json:"QAR"`
	CZK float64 `json:"CZK"`
	PEN float64 `json:"PEN"`
	RON float64 `json:"RON"`
	VND float64 `json:"VND"`
	BDT float64 `json:"BDT"`
	HUF float64 `json:"HUF"`
	UAH float64 `json:"UAH"`
	AOA float64 `json:"AOA"`
	MAD float64 `json:"MAD"`
	OMR float64 `json:"OMR"`
	CUC float64 `json:"CUC"`
	BYR float64 `json:"BYR"`
	AZN float64 `json:"AZN"`
	LKR float64 `json:"LKR"`
	SDG float64 `json:"SDG"`
	SYP float64 `json:"SYP"`
	MMK float64 `json:"MMK"`
	DOP float64 `json:"DOP"`
	UZS float64 `json:"UZS"`
	KES float64 `json:"KES"`
	GTQ float64 `json:"GTQ"`
	URY float64 `json:"URY"`
	HRV float64 `json:"HRV"`
	MOP float64 `json:"MOP"`
	ETB float64 `json:"ETB"`
	CRC float64 `json:"CRC"`
	TZS float64 `json:"TZS"`
	TMT float64 `json:"TMT"`
	TND float64 `json:"TND"`
	PAB float64 `json:"PAB"`
	LBP float64 `json:"LBP"`
	RSD float64 `json:"RSD"`
	LYD float64 `json:"LYD"`
	GHS float64 `json:"GHS"`
	YER float64 `json:"YER"`
	BOB float64 `json:"BOB"`
	BHD float64 `json:"BHD"`
	CDF float64 `json:"CDF"`
	PYG float64 `json:"PYG"`
	UGX float64 `json:"UGX"`
	SVC float64 `json:"SVC"`
	TTD float64 `json:"TTD"`
	AFN float64 `json:"AFN"`
	NPR float64 `json:"NPR"`
	HNL float64 `json:"HNL"`
	BIH float64 `json:"BIH"`
	BND float64 `json:"BND"`
	ISK float64 `json:"ISK"`
	KHR float64 `json:"KHR"`
	GEL float64 `json:"GEL"`
	MZN float64 `json:"MZN"`
	BWP float64 `json:"BWP"`
	PGK float64 `json:"PGK"`
	JMD float64 `json:"JMD"`
	XAF float64 `json:"XAF"`
	NAD float64 `json:"NAD"`
	ALL float64 `json:"ALL"`
	SSP float64 `json:"SSP"`
	MUR float64 `json:"MUR"`
	MNT float64 `json:"MNT"`
	NIO float64 `json:"NIO"`
	LAK float64 `json:"LAK"`
	MKD float64 `json:"MKD"`
	AMD float64 `json:"AMD"`
	MGA float64 `json:"MGA"`
	XPF float64 `json:"XPF"`
	TJS float64 `json:"TJS"`
	HTG float64 `json:"HTG"`
	BSD float64 `json:"BSD"`
	MDL float64 `json:"MDL"`
	RWF float64 `json:"RWF"`
	KGS float64 `json:"KGS"`
	GNF float64 `json:"GNF"`
	SRD float64 `json:"SRD"`
	SLL float64 `json:"SLL"`
	XOF float64 `json:"XOF"`
	MWK float64 `json:"MWK"`
	FJD float64 `json:"FJD"`
	ERN float64 `json:"ERN"`
	SZL float64 `json:"SZL"`
	GYD float64 `json:"GYD"`
	BIF float64 `json:"BIF"`
	KYD float64 `json:"KYD"`
	MVR float64 `json:"MVR"`
	LSL float64 `json:"LSL"`
	LRD float64 `json:"LRD"`
	CVE float64 `json:"CVE"`
	DJF float64 `json:"DJF"`
	SCR float64 `json:"SCR"`
	SOS float64 `json:"SOS"`
	GMD float64 `json:"GMD"`
	KMF float64 `json:"KMF"`
	STD float64 `json:"STD"`
	BTC float64 `json:"BTC"`
	XRP float64 `json:"XRP"`
	AUD float64 `json:"AUD"`
	BGN float64 `json:"BGN"`
	JOD float64 `json:"JOD"`
	GBP float64 `json:"GBP"`
	ETH float64 `json:"ETH"`
	EUR float64 `json:"EUR"`
	LTC float64 `json:"LTC"`
	NZD float64 `json:"NZD"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"USD\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.USD))
	}
	{
		const prefix string = ",\"JPY\":"
		out.RawString(prefix)
		out.Float64(float64(in.JPY))
	}
	{
		const prefix string = ",\"CNY\":"
		out.RawString(prefix)
		out.Float64(float64(in.CNY))
	}
	{
		const prefix string = ",\"CHF\":"
		out.RawString(prefix)
		out.Float64(float64(in.CHF))
	}
	{
		const prefix string = ",\"CAD\":"
		out.RawString(prefix)
		out.Float64(float64(in.CAD))
	}
	{
		const prefix string = ",\"MXN\":"
		out.RawString(prefix)
		out.Float64(float64(in.MXN))
	}
	{
		const prefix string = ",\"INR\":"
		out.RawString(prefix)
		out.Float64(float64(in.INR))
	}
	{
		const prefix string = ",\"BRL\":"
		out.RawString(prefix)
		out.Float64(float64(in.BRL))
	}
	{
		const prefix string = ",\"RUB\":"
		out.RawString(prefix)
		out.Int(int(in.RUB))
	}
	{
		const prefix string = ",\"KRW\":"
		out.RawString(prefix)
		out.Float64(float64(in.KRW))
	}
	{
		const prefix string = ",\"IDR\":"
		out.RawString(prefix)
		out.Float64(float64(in.IDR))
	}
	{
		const prefix string = ",\"TRY\":"
		out.RawString(prefix)
		out.Float64(float64(in.TRY))
	}
	{
		const prefix string = ",\"SAR\":"
		out.RawString(prefix)
		out.Float64(float64(in.SAR))
	}
	{
		const prefix string = ",\"SEK\":"
		out.RawString(prefix)
		out.Float64(float64(in.SEK))
	}
	{
		const prefix string = ",\"NGN\":"
		out.RawString(prefix)
		out.Float64(float64(in.NGN))
	}
	{
		const prefix string = ",\"PLN\":"
		out.RawString(prefix)
		out.Float64(float64(in.PLN))
	}
	{
		const prefix string = ",\"ARS\":"
		out.RawString(prefix)
		out.Float64(float64(in.ARS))
	}
	{
		const prefix string = ",\"NOK\":"
		out.RawString(prefix)
		out.Float64(float64(in.NOK))
	}
	{
		const prefix string = ",\"TWD\":"
		out.RawString(prefix)
		out.Float64(float64(in.TWD))
	}
	{
		const prefix string = ",\"IRR\":"
		out.RawString(prefix)
		out.Float64(float64(in.IRR))
	}
	{
		const prefix string = ",\"AED\":"
		out.RawString(prefix)
		out.Float64(float64(in.AED))
	}
	{
		const prefix string = ",\"COP\":"
		out.RawString(prefix)
		out.Float64(float64(in.COP))
	}
	{
		const prefix string = ",\"THB\":"
		out.RawString(prefix)
		out.Float64(float64(in.THB))
	}
	{
		const prefix string = ",\"ZAR\":"
		out.RawString(prefix)
		out.Float64(float64(in.ZAR))
	}
	{
		const prefix string = ",\"DKK\":"
		out.RawString(prefix)
		out.Float64(float64(in.DKK))
	}
	{
		const prefix string = ",\"MYR\":"
		out.RawString(prefix)
		out.Float64(float64(in.MYR))
	}
	{
		const prefix string = ",\"SGD\":"
		out.RawString(prefix)
		out.Float64(float64(in.SGD))
	}
	{
		const prefix string = ",\"ILS\":"
		out.RawString(prefix)
		out.Float64(float64(in.ILS))
	}
	{
		const prefix string = ",\"HKD\":"
		out.RawString(prefix)
		out.Float64(float64(in.HKD))
	}
	{
		const prefix string = ",\"EGP\":"
		out.RawString(prefix)
		out.Float64(float64(in.EGP))
	}
	{
		const prefix string = ",\"PHP\":"
		out.RawString(prefix)
		out.Float64(float64(in.PHP))
	}
	{
		const prefix string = ",\"CLP\":"
		out.RawString(prefix)
		out.Float64(float64(in.CLP))
	}
	{
		const prefix string = ",\"PKR\":"
		out.RawString(prefix)
		out.Float64(float64(in.PKR))
	}
	{
		const prefix string = ",\"IQD\":"
		out.RawString(prefix)
		out.Float64(float64(in.IQD))
	}
	{
		const prefix string = ",\"DZD\":"
		out.RawString(prefix)
		out.Float64(float64(in.DZD))
	}
	{
		const prefix string = ",\"KZT\":"
		out.RawString(prefix)
		out.Float64(float64(in.KZT))
	}
	{
		const prefix string = ",\"QAR\":"
		out.RawString(prefix)
		out.Float64(float64(in.QAR))
	}
	{
		const prefix string = ",\"CZK\":"
		out.RawString(prefix)
		out.Float64(float64(in.CZK))
	}
	{
		const prefix string = ",\"PEN\":"
		out.RawString(prefix)
		out.Float64(float64(in.PEN))
	}
	{
		const prefix string = ",\"RON\":"
		out.RawString(prefix)
		out.Float64(float64(in.RON))
	}
	{
		const prefix string = ",\"VND\":"
		out.RawString(prefix)
		out.Float64(float64(in.VND))
	}
	{
		const prefix string = ",\"BDT\":"
		out.RawString(prefix)
		out.Float64(float64(in.BDT))
	}
	{
		const prefix string = ",\"HUF\":"
		out.RawString(prefix)
		out.Float64(float64(in.HUF))
	}
	{
		const prefix string = ",\"UAH\":"
		out.RawString(prefix)
		out.Float64(float64(in.UAH))
	}
	{
		const prefix string = ",\"AOA\":"
		out.RawString(prefix)
		out.Float64(float64(in.AOA))
	}
	{
		const prefix string = ",\"MAD\":"
		out.RawString(prefix)
		out.Float64(float64(in.MAD))
	}
	{
		const prefix string = ",\"OMR\":"
		out.RawString(prefix)
		out.Float64(float64(in.OMR))
	}
	{
		const prefix string = ",\"CUC\":"
		out.RawString(prefix)
		out.Float64(float64(in.CUC))
	}
	{
		const prefix string = ",\"BYR\":"
		out.RawString(prefix)
		out.Float64(float64(in.BYR))
	}
	{
		const prefix string = ",\"AZN\":"
		out.RawString(prefix)
		out.Float64(float64(in.AZN))
	}
	{
		const prefix string = ",\"LKR\":"
		out.RawString(prefix)
		out.Float64(float64(in.LKR))
	}
	{
		const prefix string = ",\"SDG\":"
		out.RawString(prefix)
		out.Float64(float64(in.SDG))
	}
	{
		const prefix string = ",\"SYP\":"
		out.RawString(prefix)
		out.Float64(float64(in.SYP))
	}
	{
		const prefix string = ",\"MMK\":"
		out.RawString(prefix)
		out.Float64(float64(in.MMK))
	}
	{
		const prefix string = ",\"DOP\":"
		out.RawString(prefix)
		out.Float64(float64(in.DOP))
	}
	{
		const prefix string = ",\"UZS\":"
		out.RawString(prefix)
		out.Float64(float64(in.UZS))
	}
	{
		const prefix string = ",\"KES\":"
		out.RawString(prefix)
		out.Float64(float64(in.KES))
	}
	{
		const prefix string = ",\"GTQ\":"
		out.RawString(prefix)
		out.Float64(float64(in.GTQ))
	}
	{
		const prefix string = ",\"URY\":"
		out.RawString(prefix)
		out.Float64(float64(in.URY))
	}
	{
		const prefix string = ",\"HRV\":"
		out.RawString(prefix)
		out.Float64(float64(in.HRV))
	}
	{
		const prefix string = ",\"MOP\":"
		out.RawString(prefix)
		out.Float64(float64(in.MOP))
	}
	{
		const prefix string = ",\"ETB\":"
		out.RawString(prefix)
		out.Float64(float64(in.ETB))
	}
	{
		const prefix string = ",\"CRC\":"
		out.RawString(prefix)
		out.Float64(float64(in.CRC))
	}
	{
		const prefix string = ",\"TZS\":"
		out.RawString(prefix)
		out.Float64(float64(in.TZS))
	}
	{
		const prefix string = ",\"TMT\":"
		out.RawString(prefix)
		out.Float64(float64(in.TMT))
	}
	{
		const prefix string = ",\"TND\":"
		out.RawString(prefix)
		out.Float64(float64(in.TND))
	}
	{
		const prefix string = ",\"PAB\":"
		out.RawString(prefix)
		out.Float64(float64(in.PAB))
	}
	{
		const prefix string = ",\"LBP\":"
		out.RawString(prefix)
		out.Float64(float64(in.LBP))
	}
	{
		const prefix string = ",\"RSD\":"
		out.RawString(prefix)
		out.Float64(float64(in.RSD))
	}
	{
		const prefix string = ",\"LYD\":"
		out.RawString(prefix)
		out.Float64(float64(in.LYD))
	}
	{
		const prefix string = ",\"GHS\":"
		out.RawString(prefix)
		out.Float64(float64(in.GHS))
	}
	{
		const prefix string = ",\"YER\":"
		out.RawString(prefix)
		out.Float64(float64(in.YER))
	}
	{
		const prefix string = ",\"BOB\":"
		out.RawString(prefix)
		out.Float64(float64(in.BOB))
	}
	{
		const prefix string = ",\"BHD\":"
		out.RawString(prefix)
		out.Float64(float64(in.BHD))
	}
	{
		const prefix string = ",\"CDF\":"
		out.RawString(prefix)
		out.Float64(float64(in.CDF))
	}
	{
		const prefix string = ",\"PYG\":"
		out.RawString(prefix)
		out.Float64(float64(in.PYG))
	}
	{
		const prefix string = ",\"UGX\":"
		out.RawString(prefix)
		out.Float64(float64(in.UGX))
	}
	{
		const prefix string = ",\"SVC\":"
		out.RawString(prefix)
		out.Float64(float64(in.SVC))
	}
	{
		const prefix string = ",\"TTD\":"
		out.RawString(prefix)
		out.Float64(float64(in.TTD))
	}
	{
		const prefix string = ",\"AFN\":"
		out.RawString(prefix)
		out.Float64(float64(in.AFN))
	}
	{
		const prefix string = ",\"NPR\":"
		out.RawString(prefix)
		out.Float64(float64(in.NPR))
	}
	{
		const prefix string = ",\"HNL\":"
		out.RawString(prefix)
		out.Float64(float64(in.HNL))
	}
	{
		const prefix string = ",\"BIH\":"
		out.RawString(prefix)
		out.Float64(float64(in.BIH))
	}
	{
		const prefix string = ",\"BND\":"
		out.RawString(prefix)
		out.Float64(float64(in.BND))
	}
	{
		const prefix string = ",\"ISK\":"
		out.RawString(prefix)
		out.Float64(float64(in.ISK))
	}
	{
		const prefix string = ",\"KHR\":"
		out.RawString(prefix)
		out.Float64(float64(in.KHR))
	}
	{
		const prefix string = ",\"GEL\":"
		out.RawString(prefix)
		out.Float64(float64(in.GEL))
	}
	{
		const prefix string = ",\"MZN\":"
		out.RawString(prefix)
		out.Float64(float64(in.MZN))
	}
	{
		const prefix string = ",\"BWP\":"
		out.RawString(prefix)
		out.Float64(float64(in.BWP))
	}
	{
		const prefix string = ",\"PGK\":"
		out.RawString(prefix)
		out.Float64(float64(in.PGK))
	}
	{
		const prefix string = ",\"JMD\":"
		out.RawString(prefix)
		out.Float64(float64(in.JMD))
	}
	{
		const prefix string = ",\"XAF\":"
		out.RawString(prefix)
		out.Float64(float64(in.XAF))
	}
	{
		const prefix string = ",\"NAD\":"
		out.RawString(prefix)
		out.Float64(float64(in.NAD))
	}
	{
		const prefix string = ",\"ALL\":"
		out.RawString(prefix)
		out.Float64(float64(in.ALL))
	}
	{
		const prefix string = ",\"SSP\":"
		out.RawString(prefix)
		out.Float64(float64(in.SSP))
	}
	{
		const prefix string = ",\"MUR\":"
		out.RawString(prefix)
		out.Float64(float64(in.MUR))
	}
	{
		const prefix string = ",\"MNT\":"
		out.RawString(prefix)
		out.Float64(float64(in.MNT))
	}
	{
		const prefix string = ",\"NIO\":"
		out.RawString(prefix)
		out.Float64(float64(in.NIO))
	}
	{
		const prefix string = ",\"LAK\":"
		out.RawString(prefix)
		out.Float64(float64(in.LAK))
	}
	{
		const prefix string = ",\"MKD\":"
		out.RawString(prefix)
		out.Float64(float64(in.MKD))
	}
	{
		const prefix string = ",\"AMD\":"
		out.RawString(prefix)
		out.Float64(float64(in.AMD))
	}
	{
		const prefix string = ",\"MGA\":"
		out.RawString(prefix)
		out.Float64(float64(in.MGA))
	}
	{
		const prefix string = ",\"XPF\":"
		out.RawString(prefix)
		out.Float64(float64(in.XPF))
	}
	{
		const prefix string = ",\"TJS\":"
		out.RawString(prefix)
		out.Float64(float64(in.TJS))
	}
	{
		const prefix string = ",\"HTG\":"
		out.RawString(prefix)
		out.Float64(float64(in.HTG))
	}
	{
		const prefix string = ",\"BSD\":"
		out.RawString(prefix)
		out.Float64(float64(in.BSD))
	}
	{
		const prefix string = ",\"MDL\":"
		out.RawString(prefix)
		out.Float64(float64(in.MDL))
	}
	{
		const prefix string = ",\"RWF\":"
		out.RawString(prefix)
		out.Float64(float64(in.RWF))
	}
	{
		const prefix string = ",\"KGS\":"
		out.RawString(prefix)
		out.Float64(float64(in.KGS))
	}
	{
		const prefix string = ",\"GNF\":"
		out.RawString(prefix)
		out.Float64(float64(in.GNF))
	}
	{
		const prefix string = ",\"SRD\":"
		out.RawString(prefix)
		out.Float64(float64(in.SRD))
	}
	{
		const prefix string = ",\"SLL\":"
		out.RawString(prefix)
		out.Float64(float64(in.SLL))
	}
	{
		const prefix string = ",\"XOF\":"
		out.RawString(prefix)
		out.Float64(float64(in.XOF))
	}
	{
		const prefix string = ",\"MWK\":"
		out.RawString(prefix)
		out.Float64(float64(in.MWK))
	}
	{
		const prefix string = ",\"FJD\":"
		out.RawString(prefix)
		out.Float64(float64(in.FJD))
	}
	{
		const prefix string = ",\"ERN\":"
		out.RawString(prefix)
		out.Float64(float64(in.ERN))
	}
	{
		const prefix string = ",\"SZL\":"
		out.RawString(prefix)
		out.Float64(float64(in.SZL))
	}
	{
		const prefix string = ",\"GYD\":"
		out.RawString(prefix)
		out.Float64(float64(in.GYD))
	}
	{
		const prefix string = ",\"BIF\":"
		out.RawString(prefix)
		out.Float64(float64(in.BIF))
	}
	{
		const prefix string = ",\"KYD\":"
		out.RawString(prefix)
		out.Float64(float64(in.KYD))
	}
	{
		const prefix string = ",\"MVR\":"
		out.RawString(prefix)
		out.Float64(float64(in.MVR))
	}
	{
		const prefix string = ",\"LSL\":"
		out.RawString(prefix)
		out.Float64(float64(in.LSL))
	}
	{
		const prefix string = ",\"LRD\":"
		out.RawString(prefix)
		out.Float64(float64(in.LRD))
	}
	{
		const prefix string = ",\"CVE\":"
		out.RawString(prefix)
		out.Float64(float64(in.CVE))
	}
	{
		const prefix string = ",\"DJF\":"
		out.RawString(prefix)
		out.Float64(float64(in.DJF))
	}
	{
		const prefix string = ",\"SCR\":"
		out.RawString(prefix)
		out.Float64(float64(in.SCR))
	}
	{
		const prefix string = ",\"SOS\":"
		out.RawString(prefix)
		out.Float64(float64(in.SOS))
	}
	{
		const prefix string = ",\"GMD\":"
		out.RawString(prefix)
		out.Float64(float64(in.GMD))
	}
	{
		const prefix string = ",\"KMF\":"
		out.RawString(prefix)
		out.Float64(float64(in.KMF))
	}
	{
		const prefix string = ",\"STD\":"
		out.RawString(prefix)
		out.Float64(float64(in.STD))
	}
	{
		const prefix string = ",\"BTC\":"
		out.RawString(prefix)
		out.Float64(float64(in.BTC))
	}
	{
		const prefix string = ",\"XRP\":"
		out.RawString(prefix)
		out.Float64(float64(in.XRP))
	}
	{
		const prefix string = ",\"AUD\":"
		out.RawString(prefix)
		out.Float64(float64(in.AUD))
	}
	{
		const prefix string = ",\"BGN\":"
		out.RawString(prefix)
		out.Float64(float64(in.BGN))
	}
	{
		const prefix string = ",\"JOD\":"
		out.RawString(prefix)
		out.Float64(float64(in.JOD))
	}
	{
		const prefix string = ",\"GBP\":"
		out.RawString(prefix)
		out.Float64(float64(in.GBP))
	}
	{
		const prefix string = ",\"ETH\":"
		out.RawString(prefix)
		out.Float64(float64(in.ETH))
	}
	{
		const prefix string = ",\"EUR\":"
		out.RawString(prefix)
		out.Float64(float64(in.EUR))
	}
	{
		const prefix string = ",\"LTC\":"
		out.RawString(prefix)
		out.Float64(float64(in.LTC))
	}
	{
		const prefix string = ",\"NZD\":"
		out.RawString(prefix)
		out.Float64(float64(in.NZD))
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode(in *jlexer.Lexer, out *struct {
	Apikey       string `json:"apikey"`
	BaseCurrency string `json:"base_currency"`
	Timestamp    int    `json:"timestamp"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apikey":
			out.Apikey = string(in.String())
		case "base_currency":
			out.BaseCurrency = string(in.String())
		case "timestamp":
			out.Timestamp = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode(out *jwriter.Writer, in struct {
	Apikey       string `json:"apikey"`
	BaseCurrency string `json:"base_currency"`
	Timestamp    int    `json:"timestamp"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apikey\":"
		out.RawString(prefix[1:])
		out.String(string(in.Apikey))
	}
	{
		const prefix string = ",\"base_currency\":"
		out.RawString(prefix)
		out.String(string(in.BaseCurrency))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int(int(in.Timestamp))
	}
	out.RawByte('}')
}
